/// DNS Zone file parsing
///
/// Format is defined in rfc1035 Section 5, extended rfc2308 Section 4.
///
/// <domain-name><rr> [<comment>]
/// <blank><rr> [<comment>]
/// ```
///
/// <rr> contents take one of the following forms:
/// ```text
/// [<TTL>] [<class>] <type> <RDATA>
/// [<class>] [<TTL>] <type> <RDATA>
/// ```

WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT = _{ ";" ~ (!NEWLINE ~ ANY)* }

domain = @{ ( "@" | (ASCII_ALPHANUMERIC | "." | "-")+ ) }
string = @{ (ASCII_ALPHANUMERIC | "." | "-" | "\\")+ } // TODO Should we call this string?
ip4 = @{ (ASCII_DIGIT | ".")+ }
ip6 = @{ (ASCII_HEX_DIGIT | ":")+ }
number = @{ ASCII_DIGIT+ }
duration = @{ ASCII_DIGIT+ }
class = @{ ^"IN" | ^"CS" | ^"CH" | ^"HS" }
resource = { 
	resource_a | 
	resource_aaaa | 
	resource_ns | 
	resource_mx | 
	resource_soa
}

resource_a    = {^"A"    ~ ip4}
resource_aaaa = {^"AAAA" ~ ip6}
resource_ns   = {^"NS"   ~ domain}
resource_mx   = {^"MX"   ~ number ~ domain}
resource_soa  = {^"SOA"  ~ domain ~ string ~ number ~ duration ~ duration ~ duration ~ duration}


file = {
	// TODO records can be split across many lines
	SOI ~ (row ~ (NEWLINE ~ row)*)? ~ EOI
}

row = {
	SOI ~ (
	  origin
	| ttl
      | record
      ) ~ EOI
}

origin = {
	"$ORIGIN" ~ domain
}

ttl = {
	"$TTL" ~ duration
}

record = { 
	// This is perhaps more verbose than needed, but this ensures
	// we parse this ambiguous text in a well defined order.
	// For example, "IN" could be a domain, or a class.

	// All arguments are provided
	  (domain ~ duration ~ class ~ resource)
	| (domain ~ class ~ duration ~ resource)

	// No domain provided, but match these first, we assume IN means class, not domain
	| (duration ~ class ~ resource)
	| (duration ~ resource)
	| (class ~ duration ~ resource)
	| (class ~ resource)

	// Match the ones listing domains
	| (domain ~ class ~ resource)
	| (domain ~ duration ~ resource)
	| (domain ~ resource)

	// Finally no domain.
	| resource
}

